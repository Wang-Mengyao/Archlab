# 19307130352 Mengyao Wang
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# try loop unrolling first and iaddq is available now. limit stores in %r8
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddq $-4, %rdx
	jl preloop2
loop1:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi
	andq %r10, %r10		# val <= 0?
	jle add2
	iaddq $1, %rax		# count++
add2:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi
	andq %r10, %r10		# val <= 0?
	jle add3
	iaddq $1, %rax		# count++
add3:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi
	andq %r10, %r10		# val <= 0?
	jle add4
	iaddq $1, %rax		# count++
add4:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi
	andq %r10, %r10		# val <= 0?
	jle test
	iaddq $1, %rax		# count++
test:
	iaddq $-4, %rdx
	jge loop1 # if so, goto Loop1:big loop 4 x 1
preloop2:
	iaddq $4, %rdx
	je Done
loop2:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rdi
	iaddq $8, %rsi
	andq %r10, %r10		# val <= 0?
	jle new_len
	iaddq $1, %rax		# count++
new_len:
	iaddq $-1, %rdx
	andq %rdx, %rdx
	jne loop2
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
