# 19307130352 Mengyao Wang
# do loop rolling, test 2, 3, 5, 6, 7, 8 and 5 seems the best
# read all vals from src first and stores them in different registers to avoid stalling in rmmovq %r8, (%rsi)
# avoid iaddq $8, %rdi many times and use iaddq $40, %rdi in the end 
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# try loop unrolling first and iaddq is available now. limit stores in %r8
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddq $-5, %rdx
	jl preloop2
loop1:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle add2
	iaddq $1, %rax		# count++
add2:
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle add3
	iaddq $1, %rax		# count++
add3:
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle add4
	iaddq $1, %rax		# count++
add4:
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11 	# val <= 0?
	jle add5
	iaddq $1, %rax		# count++
add5:
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	iaddq $40, %rdi
	iaddq $40, %rsi
	andq %r12, %r12 	# val <= 0?
	jle test
	iaddq $1, %rax		# count++
test:
	iaddq $-5, %rdx
	jge loop1 # if so, goto Loop1:big loop 4 x 1
preloop2:
	iaddq $5, %rdx
	je Done
loop2:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle next2
	iaddq $1, %rax		# count++
next2:
	iaddq $-1, %rdx
	je Done
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle next3
	iaddq $1, %rax		# count++
next3:
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	iaddq $-1, %rdx
	je Done
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle next4
	iaddq $1, %rax		# count++
next4:
	iaddq $-1, %rdx
	je Done
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle Done
	iaddq $1, %rax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
