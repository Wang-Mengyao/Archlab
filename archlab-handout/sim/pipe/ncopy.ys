# 19307130352 Mengyao Wang
#
# do loop rolling, test 2, 3, 5, 6, 7, 8 and 5 seems the best
# but after testing, it seems that the second part matters, so 8 may be good as long as this part is good
# read all vals from src first and stores them in different registers to avoid stalling
# avoid iaddq $8, %rdi many times and use iaddq $64, %rdi in the end 
# delete xorq %rax,%rax because by default, %rax stores 0
# in the second part, devide it into tow parts, one including remainder 0,1,2,3, and another including 4,5,6,7 to reduce useless steps
# 
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# try loop unrolling first and iaddq is available now. limit stores in %r8
	# Loop header
	# xorq %rax,%rax		# count = 0; by default, %rax stores 0
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddq $-8, %rdx
	jl preloop2
loop1:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rcx	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle add2
	iaddq $1, %rax		# count++
add2:
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle add3
	iaddq $1, %rax		# count++
add3:
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle add4
	iaddq $1, %rax		# count++
add4:
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11 	# val <= 0?
	jle add5
	iaddq $1, %rax		# count++
add5:
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	andq %r12, %r12 	# val <= 0?
	jle add6
	iaddq $1, %rax		# count++
add6:
	rmmovq %r13, 40(%rsi)	# ...and store it to dst
	andq %r13, %r13 	# val <= 0?
	jle add7
	iaddq $1, %rax		# count++
add7:
	rmmovq %r14, 48(%rsi)	# ...and store it to dst
	andq %r14, %r14	    # val <= 0?
	jle add8
	iaddq $1, %rax		# count++
add8:
	rmmovq %rcx, 56(%rsi)	# ...and store it to dst
	iaddq $64, %rdi
	iaddq $64, %rsi
	andq %rcx, %rcx 	# val <= 0?
	jle test
	iaddq $1, %rax		# count++
test:
	iaddq $-8, %rdx
	jge loop1 # if so, goto Loop1:big loop 8 x 1
preloop2:
	iaddq $5, %rdx
	jl next2
next0:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle next01
	iaddq $1, %rax
next01:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle next02
	iaddq $1, %rax
next02:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle prenext1
	iaddq $1, %rax
# 4,5,6,7
prenext1:
	andq %rdx, %rdx
	je Done
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	iaddq $-2, %rdx
	jg next1
next4:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle next41
	iaddq $1, %rax
next41:
	iaddq $1, %rdx
	je Done
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle Done
	jmp preDone
next1:
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle next11
	iaddq $1, %rax
next11:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle next12
	iaddq $1, %rax
next12:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle next13
	iaddq $1, %rax
next13:
	iaddq $-1, %rdx
	je Done
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle Done
	jmp preDone
next2:
	iaddq $3, %rdx
	je Done
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle next21
	iaddq $1, %rax
next21:
	iaddq $-1, %rdx
	je Done
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9
	jle Done
preDone:
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
